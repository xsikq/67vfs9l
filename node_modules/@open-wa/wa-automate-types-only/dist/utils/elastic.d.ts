import { Request, Response } from "express";
declare type CustomResponse = Response & {
    _swsReq: any;
};
export declare class ElasticEmitter {
    queue: any;
    pipeline: any;
    username: any;
    password: any;
    elasticURL: any;
    enabled: boolean;
    lastFlush: any;
    hostname: any;
    sanitize: any;
    version: string;
    es7: boolean;
    ES_MAX_BUFF: number;
    indexBuffer: string;
    bufferCount: number;
    indexPrefix: string;
    ip: any;
    /**
     *
     * @param elasticUrl Elastic search endpoint URL
     * @param username Elastic username
     * @param password Elastic passowrd
     * @param pipeline Pipeline to send the RRR
     */
    constructor(elasticURL: string, username: string, password: string, max?: number, pipeline?: string, indexPrefix?: string);
    private get elasticURLBulk();
    private initTemplate;
    processRecord(rrr: any): Promise<void>;
    flush(): Promise<void>;
    elasticMiddleware(config: {
        sanitize: Function;
    }): (req: Request, res: CustomResponse, next: any) => unknown;
    private collectRequestResponseData;
    private handleRequest;
    private processRequest;
    private processResponse;
}
export declare const getStatusCodeClass: (code: number) => string;
export declare const swsStringRecursive: (output: any, val: any) => any;
export declare const swsStringValue: (val: any) => string;
export declare const getPort: (req: any) => number;
export declare const getResponseContentLength: (req: any, res: any) => any;
export declare const getRemoteIP: (req: any) => string;
export declare const getRemoteRealIP: (req: any) => any;
export declare const getApiOpParameterValues: (path: any, method: any, req: any) => {};
export {};
